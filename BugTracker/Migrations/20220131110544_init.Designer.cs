// <auto-generated />
using System;
using BugTracker.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugTracker.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20220131110544_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BugTracker.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("commentid")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("date");

                    b.Property<string>("Text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("TicketId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("BugTracker.Models.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("historyid")
                        .HasColumnType("int");

                    b.Property<string>("Attribute")
                        .HasColumnName("attribute")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("NewValue")
                        .HasColumnName("newvalue")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("OldValue")
                        .HasColumnName("oldvalue")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("TicketId");

                    b.ToTable("history");
                });

            modelBuilder.Entity("BugTracker.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("mediaid")
                        .HasColumnType("int");

                    b.Property<byte[]>("Data")
                        .HasColumnName("data")
                        .HasColumnType("varbinary(4000)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.HasKey("MediaId");

                    b.HasIndex("TicketId");

                    b.ToTable("media");
                });

            modelBuilder.Entity("BugTracker.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("projectid")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateModified")
                        .HasColumnName("datemodified")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("project");
                });

            modelBuilder.Entity("BugTracker.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ticketid")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datemodified")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateModified")
                        .HasColumnName("datemodified")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int>("PriorityId")
                        .HasColumnName("priorityid")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnName("statusid")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int>("TypeId")
                        .HasColumnName("typeid")
                        .HasColumnType("int");

                    b.Property<int>("UserAssignedId")
                        .HasColumnType("int");

                    b.Property<int>("UserCreatedId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserAssignedId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("BugTracker.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnName("roleid")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("BugTracker.Models.Comment", b =>
                {
                    b.HasOne("BugTracker.Models.Ticket", "Ticket")
                        .WithMany("Comment")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_ticket_comment")
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Models.History", b =>
                {
                    b.HasOne("BugTracker.Models.Ticket", "Ticket")
                        .WithMany("History")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_ticket_history")
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Models.Media", b =>
                {
                    b.HasOne("BugTracker.Models.Ticket", "Ticket")
                        .WithMany("Media")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_ticket_media")
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Models.Project", b =>
                {
                    b.HasOne("BugTracker.Models.User", "UserCreated")
                        .WithMany("Project")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_user_project")
                        .IsRequired();
                });

            modelBuilder.Entity("BugTracker.Models.Ticket", b =>
                {
                    b.HasOne("BugTracker.Models.Project", "Project")
                        .WithMany("Ticket")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_ticket_project")
                        .IsRequired();

                    b.HasOne("BugTracker.Models.User", "UserAssigned")
                        .WithMany("AssignTicket")
                        .HasForeignKey("UserAssignedId")
                        .HasConstraintName("FK_ticket_userAssigned")
                        .IsRequired();

                    b.HasOne("BugTracker.Models.User", "UserCreated")
                        .WithMany("CreateTicket")
                        .HasForeignKey("UserCreatedId")
                        .HasConstraintName("FK_ticket_userCreated")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
